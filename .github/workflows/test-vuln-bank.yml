name: Test Vulnerable Bank Application

on:
  # Run on push to dev branch only
  push:
    branches: [dev]
    paths:
      - 'tests/security/**'  # Only watch security test files
      - 'playwright.config.ts'
      - '.github/workflows/**'
  
  # Run on PRs to dev branch
  pull_request:
    branches: [dev]
  
  # Manual trigger with options
  workflow_dispatch:
    inputs:
      app_branch:
        description: 'APP branch to test'
        required: false
        default: 'main'
        type: string
      soft_mode:
        description: 'Run in SOFT mode (warnings vs failures)'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
      test_suite:
        description: 'Which tests to run'
        required: false
        default: 'all'
        type: choice
        options:
          - 'all'
          - 'api'
          - 'security'
          - 'ui'
  
  # Scheduled runs (nightly at 2 AM UTC)
  schedule:
    - cron: '0 2 * * *'

env:
  APP_REPO: 'smilyutin/vuln_bank'
  APP_BRANCH: ${{ inputs.app_branch || 'main' }}
  SOFT_MODE: ${{ inputs.soft_mode || 'true' }}
  TEST_SUITE: ${{ inputs.test_suite || 'all' }}
  BASE_URL: 'http://localhost:5001'
  NODE_VERSION: '20'

jobs:
  test-application:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: write  # For pushing to the repository
      pages: write    # For GitHub Pages deployment
      id-token: write # For GitHub OIDC token
    
    steps:
      # ==================== SETUP TEST REPO ====================
      
      - name: 📥 Checkout Test Repo
        uses: actions/checkout@v4
        with:
          path: test-repo
      
      - name: 🛠 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'test-repo/package-lock.json'
          
      - name: 📦 Install Allure CLI
        run: |
          # Install Allure using the official Debian package
          echo "Installing Allure CLI..."
          sudo apt-get update
          sudo apt-get install -y default-jre
          wget https://github.com/allure-framework/allure2/releases/download/2.24.0/allure_2.24.0-1_all.deb
          sudo dpkg -i allure_2.24.0-1_all.deb || sudo apt-get install -f -y
          # Verify installation
          echo "Allure version: $(allure --version || echo 'Allure not found')"
      
      - name: 📦 Install Test Dependencies
        working-directory: ./test-repo
        run: |
          echo "📂 Current directory: $(pwd)"
          echo "📦 Setting up test-repo dependencies..."
          
          # Initialize npm if package.json doesn't exist
          if [ ! -f "package.json" ]; then
            echo "📝 Creating package.json..."
            npm init -y
          fi
          
          # Install required packages
          echo "📦 Installing dependencies..."
          npm install @playwright/test@^1.40.0 allure-playwright@^2.0.0 --save-dev
          
          # Verify installation
          echo "✅ Dependencies installed"
          echo "📦 package.json:"
          cat package.json
          echo -e "\n📦 package-lock.json exists: $( [ -f package-lock.json ] && echo '✅ Yes' || echo '❌ No' )"
          
          # Install Playwright browsers
          echo "🌐 Installing Playwright browsers..."
          npx playwright install --with-deps chromium
          
          # Verify installation
          echo "✅ Playwright browsers installed"
          
          # Set registry to default
          npm config set registry https://registry.npmjs.org/
          
          # Verify npm config
          echo "📦 npm config list:"
          npm config list
          
          # Create package.json with required dependencies if it doesn't exist
          if [ ! -f package.json ]; then
            echo "📝 Creating package.json..."
            cat > package.json << 'EOL'
            {
              "name": "bank-tests",
              "version": "1.0.0",
              "private": true,
              "dependencies": {
                "@playwright/test": "^1.40.0",
                "allure-playwright": "^2.0.0"
              }
            }
            EOL
          fi
          
          # Install dependencies
          echo "🔧 Installing dependencies..."
          
          # First, create package-lock.json if it doesn't exist
          if [ ! -f "package-lock.json" ]; then
            echo "🔒 Creating package-lock.json..."
            npm install --package-lock-only
          fi
          
          # Then perform a clean install
          echo "📦 Performing clean install..."
          npm ci --no-audit
          
          # If ci fails, fall back to regular install
          if [ $? -ne 0 ]; then
            echo "⚠️ npm ci failed, falling back to npm install..."
            npm install --no-audit
          fi
          
          # Verify installation
          echo "✅ Dependencies installed"
          echo "📦 package.json:"
          cat package.json
          echo -e "\n📦 package-lock.json exists: $( [ -f package-lock.json ] && echo '✅ Yes' || echo '❌ No' )"
          
          # Install Playwright browsers
          echo "🌐 Installing Playwright browsers..."
          npx playwright install --with-deps chromium

      - name: 📥 Clone APP Repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.APP_REPO }}
          ref: ${{ env.APP_BRANCH }}
          path: app-repo
          # Use GITHUB_TOKEN (has access to public repos by default)
          # For private repos, add a PAT as APP_REPO_TOKEN secret
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 🔧 Setup Node.js for APP
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: 📦 Install APP Dependencies
        working-directory: ./app-repo
        run: |
          echo "Installing dependencies..."
          if [ -f "package-lock.json" ]; then
            npm ci
          else
            npm install
          fi
      
      - name: 🐳 Setup Docker Configuration
        working-directory: ./app-repo
        run: |
          # Check if docker-compose.yml exists
          if [ ! -f "docker-compose.yml" ]; then
            echo "⚠️  No docker-compose.yml found, creating one..."
            cat > docker-compose.yml << 'EOF'
          version: '3.8'
          services:
            app:
              build: .
              ports:
                - "5001:5001"
              environment:
                - NODE_ENV=test
                - PORT=5001
              healthcheck:
                test: ["CMD-SHELL", "curl -f http://localhost:5001/health || curl -f http://localhost:5001/ || exit 1"]
                interval: 10s
                timeout: 5s
                retries: 5
                start_period: 30s
          EOF
          else
            echo "✅ Found existing docker-compose.yml"
          fi
          
          # Check if Dockerfile exists
          if [ ! -f "Dockerfile" ]; then
            echo "⚠️  No Dockerfile found, creating one..."
            cat > Dockerfile << 'EOF'
          FROM node:20-alpine
          WORKDIR /app
          COPY package*.json ./
          RUN npm ci --only=production || npm install --production
          COPY . .
          EXPOSE 5001
          HEALTHCHECK --interval=10s --timeout=5s --start-period=30s \
            CMD wget --no-verbose --tries=1 --spider http://localhost:5001/health || exit 1
          CMD ["npm", "start"]
          EOF
          else
            echo "✅ Found existing Dockerfile"
          fi
          
          echo "=== Docker Configuration ==="
          echo "Dockerfile:"
          cat Dockerfile
          echo ""
          echo "docker-compose.yml:"
          cat docker-compose.yml
      
      - name: 🔨 Build APP Docker Image
        working-directory: ./app-repo
        run: |
          echo "Building Docker image..."
          docker build -t vuln-bank:test .
          echo "✅ Image built successfully"
          docker images | grep vuln-bank
      
      # ==================== START APP ====================
      
      - name: 🚀 Start APP Container
        working-directory: ./app-repo
        run: |
          echo "Starting application..."
          docker compose up -d
          echo "Waiting for container to initialize..."
          sleep 10
          echo "Container status:"
          docker compose ps
          docker ps
      
      - name: ⏳ Wait for APP to be Ready
        run: |
          echo "Waiting for application to respond..."
          timeout 120 bash -c '
            until curl -f http://localhost:5001/health 2>/dev/null || curl -f http://localhost:5001/ 2>/dev/null; do 
              echo "⏳ Waiting for app... ($(date +%T))"
              docker ps
              sleep 3
            done
          '
          echo "✅ Application is ready!"
      
      - name: 🔍 Verify APP Endpoints
        run: |
          echo "=== Testing Endpoints ==="
          echo "Main endpoint:"
          curl -v http://localhost:5001/ 2>&1 | head -20 || echo "❌ Failed"
          
          echo ""
          echo "Health endpoint:"
          curl -v http://localhost:5001/health 2>&1 || echo "⚠️  No health endpoint"
          
          echo ""
          echo "API endpoint:"
          curl -v http://localhost:5001/api/ 2>&1 || echo "⚠️  No API endpoint"
      
      - name: 🌱 Seed Database with Test Users
        working-directory: ./test-repo
        run: |
          echo "Seeding database with fixture users..."
          node -e "
          const fs = require('fs');
          const http = require('http');
          
          // Read fixture users
          const users = JSON.parse(fs.readFileSync('tests/fixtures/users.json', 'utf8')).users;
          console.log('Found ' + users.length + ' users to seed');
          
          // Function to create user
          async function createUser(user) {
            return new Promise((resolve) => {
              const data = JSON.stringify({
                username: user.username || user.email.split('@')[0],
                email: user.email,
                password: user.password
              });
              
              const options = {
                hostname: 'localhost',
                port: 5001,
                path: '/api/register',
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'Content-Length': data.length
                }
              };
              
              const req = http.request(options, (res) => {
                let body = '';
                res.on('data', (chunk) => body += chunk);
                res.on('end', () => {
                  if (res.statusCode === 200 || res.statusCode === 201) {
                    console.log('✅ Created user: ' + user.username);
                  } else if (res.statusCode === 409 || res.statusCode === 400) {
                    console.log('ℹ️  User exists: ' + user.username);
                  } else {
                    console.log('⚠️  Status ' + res.statusCode + ' for: ' + user.username);
                  }
                  resolve();
                });
              });
              
              req.on('error', (e) => {
                console.log('❌ Error creating ' + user.username + ': ' + e.message);
                resolve();
              });
              
              req.write(data);
              req.end();
            });
          }
          
          // Seed all users
          (async () => {
            for (const user of users.slice(0, 10)) {
              await createUser(user);
              await new Promise(r => setTimeout(r, 200));
            }
            console.log('✅ Database seeding complete!');
          })();
          "
      
      - name: 📋 Show APP Startup Logs
        if: always()
        working-directory: ./app-repo
        run: |
          echo "=== Application Logs (last 100 lines) ==="
          docker compose logs --tail=100
      
      # ==================== RUN TESTS ====================
      
      - name: 🧪 Run Tests
        working-directory: ./test-repo
        env:
          BASE_URL: ${{ env.BASE_URL }}
          SECURITY_SOFT: ${{ env.SOFT_MODE }}
          ALLURE_RESULTS_DIR: ${{ github.workspace }}/test-repo/allure-results
        run: |
          echo "================================================"
          echo "🎯 Test Configuration"
          echo "================================================"
          echo "Target URL:    $BASE_URL"
          echo "SOFT mode:     $SECURITY_SOFT"
          echo "Test suite:    $TEST_SUITE"
          echo "APP branch:    $APP_BRANCH"
          echo "Allure Results: $ALLURE_RESULTS_DIR"
          echo "================================================"
          echo ""
          
          # Create test results directory
          mkdir -p $ALLURE_RESULTS_DIR
          
          # Run tests with Allure reporting
          EXIT_CODE=0
          echo "🔒 Running Security tests with Allure reporting..."
          
          # Create directories if they don't exist
          mkdir -p $ALLURE_RESULTS_DIR
          
          # Run security tests with Allure reporting and timeout
          echo "🚀 Starting security tests..."
          timeout 15m npx playwright test tests/security/ \
            --reporter=line,allure-playwright \
            --output=$ALLURE_RESULTS_DIR \
            --workers=2 \
            --timeout=300000 || EXIT_CODE=$?
            
          if [ $EXIT_CODE -eq 124 ]; then
            echo "⚠️ Tests timed out after 15 minutes"
            # Generate report with whatever results we have
            EXIT_CODE=0
          fi
            
          # List generated test results
          echo "Generated test results in $ALLURE_RESULTS_DIR:"
          find $ALLURE_RESULTS_DIR -type f || echo "No test results found"
          
          # Just collect test results, we'll generate the report in a dedicated step
          echo "📊 Test results collected in: $ALLURE_RESULTS_DIR"
          ls -la $ALLURE_RESULTS_DIR/ || echo "No test results found"
            
          # Verify report was generated
          echo "Generated report files:"
          find ./allure-report -type f | head -20 || echo "No report files found"
          
          # List generated test results
          echo "Generated test results:"
          find $ALLURE_RESULTS_DIR -type f | xargs ls -la || true
          
          echo ""
          echo "================================================"
          if [ $EXIT_CODE -eq 0 ]; then
            echo "✅ Tests completed successfully"
          else
            if [ "$SECURITY_SOFT" = "true" ]; then
              echo "⚠️  Tests found issues (SOFT mode - not failing build)"
              EXIT_CODE=0
            else
              echo "❌ Tests failed (HARD mode - failing build)"
            fi
          fi
          echo "================================================"
          
          exit $EXIT_CODE
      
      # ==================== GENERATE REPORTS ====================
      
      - name: 📊 Generate Allure Report
        if: always()
        working-directory: ./test-repo
        env:
          ALLURE_RESULTS_DIR: ${{ github.workspace }}/test-repo/allure-results
        run: |
          echo "=== Generating Allure Report ==="
          
          # Ensure results directory exists
          mkdir -p $ALLURE_RESULTS_DIR
          
          # Check if we have any test results
          if [ -z "$(ls -A $ALLURE_RESULTS_DIR/ 2>/dev/null)" ]; then
            echo '{"name": "No test results found", "status": "broken", "start": 0, "stop": 0}' > "$ALLURE_RESULTS_DIR/no-results-found.json"
            echo "⚠️  No test results found. Created empty result to prevent Allure errors."
          fi
          
          # Generate the report
          echo "Generating Allure report from: $ALLURE_RESULTS_DIR"
          ls -la "$ALLURE_RESULTS_DIR/" || echo "Could not list results directory"
          
          # Generate the report
          echo "Current directory: $(pwd)"
          mkdir -p ./allure-report
          
          # Generate the report using the globally installed Allure
          allure generate "$ALLURE_RESULTS_DIR" --clean -o ./allure-report
          
          # Verify report was generated
          if [ -d "allure-report" ]; then
            echo "✅ Allure report generated successfully"
            ls -la allure-report/
          else
            echo "❌ Failed to generate Allure report"
            exit 1
          fi
      
      - name: 📤 Upload Allure Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report-${{ github.run_number }}
          path: test-repo/allure-report/
          retention-days: 30
          
      - name: 📤 Upload Playwright HTML Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ github.run_number }}
          path: test-repo/playwright-report/
          retention-days: 30
      
      - name: 📤 Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ github.run_number }}
          path: test-repo/test-results/
          retention-days: 30
      
      # ==================== COLLECT LOGS ====================
      
      - name: 📋 Collect APP Logs
        if: always()
        working-directory: ./app-repo
        run: |
          mkdir -p ../app-logs
          echo "Collecting docker compose logs..."
          docker compose logs > ../app-logs/docker-compose.log 2>&1
          echo "Collecting container logs..."
          docker logs $(docker compose ps -q app) > ../app-logs/app-container.log 2>&1 || true
          echo "Collecting system info..."
          docker ps > ../app-logs/docker-ps.log 2>&1
          docker images > ../app-logs/docker-images.log 2>&1
      
      - name: 📤 Upload APP Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: app-logs-${{ github.run_number }}
          path: app-logs/
          retention-days: 30
      
      # ==================== CLEANUP ====================
      
      - name: 🧹 Stop and Remove Containers
        if: always()
        working-directory: ./app-repo
        run: |
          echo "Stopping containers..."
          docker compose down -v --remove-orphans
          echo "Cleaning up Docker resources..."
          docker system prune -f
      
      - name: ✅ Verify Cleanup
        if: always()
        run: |
          echo "=== Remaining Containers ==="
          docker ps -a
          echo ""
          echo "=== Remaining Volumes ==="
          docker volume ls
          echo ""
          echo "=== Disk Usage ==="
          docker system df
      
      # ==================== DEPLOY TO GITHUB PAGES ====================
      
      - name: 🚀 Deploy to GitHub Pages
        if: always()
        run: |
          echo "📂 Current directory: $(pwd)"
          echo "📦 Files in test-repo/allure-report:"
          ls -la test-repo/allure-report/ || echo "No allure-report directory found"
          
          # Ensure the target directory exists
          mkdir -p test-repo/allure-report
          
          # Create a simple index.html if it doesn't exist
          if [ ! -f "test-repo/allure-report/index.html" ]; then
            echo "📝 Creating index.html..."
            echo "<h1>Allure Report</h1><p>Report will be available after first successful test run.</p>" > test-repo/allure-report/index.html
          fi
          
          # Deploy using the gh-pages package
          npm install -g gh-pages
          
          # Configure git
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Deploy to gh-pages branch
          cd test-repo
          npx gh-pages -d allure-report \
            --repo https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git \
            --user "GitHub Actions <actions@github.com>" \
            --message "Deploy Allure Report [skip ci]"
          
      # ==================== SUMMARY ====================
      
      - name: 📝 Test Summary
        if: always()
        run: |
          echo "## 🎯 Security Test Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Parameter | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| APP Repo | \`${{ env.APP_REPO }}@${{ env.APP_BRANCH }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| SOFT Mode | \`${{ env.SOFT_MODE }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Status | ${{ job.status }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Get the workflow run URL
          WORKFLOW_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          echo "### 📊 Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- [View All Artifacts]($WORKFLOW_URL)" >> $GITHUB_STEP_SUMMARY
          echo "- [Download Security Test Results]($WORKFLOW_URL/artifacts/$(echo -n \"test-results-${{ github.run_number }}\" | jq -sRr @uri))" >> $GITHUB_STEP_SUMMARY
          echo "- [Download Application Logs]($WORKFLOW_URL/artifacts/$(echo -n \"app-logs-${{ github.run_number }}\" | jq -sRr @uri))" >> $GITHUB_STEP_SUMMARY
          
          # Add link to GitHub Pages Allure report
          if [ "${{ job.status }}" != "cancelled" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🌐 Allure Report" >> $GITHUB_STEP_SUMMARY
            echo "- [View Latest Allure Report on GitHub Pages](https://${{ github.repository_owner }}.github.io/$(echo ${{ github.repository }} | cut -d'/' -f2)/allure-report/)" >> $GITHUB_STEP_SUMMARY
            echo "- [Download Allure Report]($WORKFLOW_URL/artifacts/$(echo -n \"allure-report-${{ github.run_number }}\" | jq -sRr @uri))" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "- [View Full Workflow Run]($WORKFLOW_URL)" >> $GITHUB_STEP_SUMMARY
          echo "- [View All Security Test Runs](${{ github.server_url }}/${{ github.repository }}/actions/workflows/$(basename $GITHUB_WORKFLOW))" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Actions Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
